CONSTTK const
INTTK int
IDENFR c_var1_g
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR c_var2_g
ASSIGN =
INTCON 2
COMMA ,
IDENFR c_var3_g
ASSIGN =
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR D_g
ASSIGN =
INTCON 4
COMMA ,
IDENFR E_g
ASSIGN =
INTCON 5
COMMA ,
IDENFR F_g
ASSIGN =
INTCON 6
SEMICN ;
CONSTTK const
INTTK int
IDENFR c_arr1_g
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR c_arr2_g
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 6
COMMA ,
INTCON 7
RBRACE }
COMMA ,
LBRACE {
INTCON 8
COMMA ,
INTCON 9
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR var1_g
SEMICN ;
INTTK int
IDENFR temp
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR arr1_g
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
INTTK int
IDENFR arr2_g
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 6
COMMA ,
INTCON 7
RBRACE }
COMMA ,
LBRACE {
INTCON 8
COMMA ,
INTCON 9
RBRACE }
RBRACE }
SEMICN ;
VOIDTK void
IDENFR func2
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
IDENFR func1
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR c
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR d
ASSIGN =
IDENFR a
MULT *
INTCON 2
PLUS +
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
MOD %
INTCON 2
PLUS +
IDENFR c
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MOD %
INTCON 3
SEMICN ;
IDENFR var1_g
ASSIGN =
IDENFR d
MULT *
LPARENT (
IDENFR a
PLUS +
INTCON 2
RPARENT )
SEMICN ;
SEMICN ;
IDENFR func2
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR var1_g
LSS <
INTCON 30
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d < 30.\n"
COMMA ,
IDENFR var1_g
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR var1_g
EQL ==
INTCON 30
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d = 30.\n"
COMMA ,
IDENFR var1_g
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d > 30.\n"
COMMA ,
IDENFR var1_g
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR vfunc1
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR c
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR d
ASSIGN =
IDENFR a
MULT *
INTCON 2
PLUS +
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
MOD %
INTCON 2
PLUS +
IDENFR c
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MOD %
INTCON 3
SEMICN ;
IDENFR var1_g
ASSIGN =
IDENFR d
MULT *
LPARENT (
IDENFR a
PLUS +
INTCON 2
RPARENT )
SEMICN ;
SEMICN ;
IDENFR func2
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR var1_g
LSS <
INTCON 30
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d < 30.\n"
COMMA ,
IDENFR var1_g
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR var1_g
EQL ==
INTCON 30
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d = 30.\n"
COMMA ,
IDENFR var1_g
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d > 30.\n"
COMMA ,
IDENFR var1_g
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "DNMD\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR no_meaning_fun
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR var1
ASSIGN =
INTCON 114514
SEMICN ;
CONSTTK const
INTTK int
IDENFR c_var1
ASSIGN =
INTCON 6
SEMICN ;
CONSTTK const
INTTK int
IDENFR c_var2
ASSIGN =
INTCON 6
COMMA ,
IDENFR c_var3
ASSIGN =
INTCON 6
SEMICN ;
IDENFR var1
ASSIGN =
PLUS +
IDENFR var1
SEMICN ;
IDENFR var1
ASSIGN =
MINU -
INTCON 11
SEMICN ;
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IDENFR var1
SEMICN ;
INTCON 3
SEMICN ;
INTCON 2
PLUS +
INTCON 5
MINU -
IDENFR var1
SEMICN ;
IDENFR arr1_g
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IFTK if
LPARENT (
IDENFR var1
DIV /
IDENFR c_var1
LSS <
IDENFR c_var2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR var1
MOD %
IDENFR c_var1
GRE >
IDENFR c_var2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR var1
MOD %
IDENFR c_var1
GEQ >=
IDENFR c_var2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR var1
MOD %
IDENFR c_var1
LEQ <=
IDENFR c_var2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 3
EQL ==
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 3
NEQ !=
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 3
AND &&
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 3
OR ||
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR temp
OR ||
IDENFR c_var1_g
RPARENT )
SEMICN ;
PLUS +
INTCON 1
SEMICN ;
MINU -
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR for_loop
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
COMMA ,
IDENFR j
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 3
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
LSS <
INTCON 3
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 10
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
INTTK int
IDENFR is_palindrome
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
IDENFR x
COMMA ,
IDENFR b
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
LBRACE {
RBRACE }
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
AND &&
IDENFR x
LSS <
INTCON 10
RPARENT )
RETURNTK return
INTCON 1
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
RETURNTK return
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR a
GRE >
INTCON 0
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
DIV /
INTCON 10
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
IDENFR b
MULT *
INTCON 10
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
PLUS +
IDENFR a
MOD %
INTCON 10
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
EQL ==
IDENFR x
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR x
SEMICN ;
IDENFR x
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "21373339\n"
RPARENT )
SEMICN ;
IDENFR func3
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "21373339\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "21373339\n"
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR c_var1
ASSIGN =
INTCON 6
SEMICN ;
CONSTTK const
INTTK int
IDENFR c_var2
ASSIGN =
INTCON 6
COMMA ,
IDENFR c_var3
ASSIGN =
INTCON 6
SEMICN ;
CONSTTK const
INTTK int
IDENFR c_arr1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR c_arr2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 2
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR ui_var1
SEMICN ;
INTTK int
IDENFR ui_var2
COMMA ,
IDENFR ui_var3
SEMICN ;
INTTK int
IDENFR ui_arr1
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
INTTK int
IDENFR ui_arr2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR var1
ASSIGN =
INTCON 114514
SEMICN ;
INTTK int
IDENFR var2
ASSIGN =
INTCON 1919810
COMMA ,
IDENFR var3
ASSIGN =
INTCON 810
SEMICN ;
INTTK int
IDENFR arr1
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 8
COMMA ,
INTCON 7
COMMA ,
INTCON 6
COMMA ,
INTCON 5
COMMA ,
INTCON 4
RBRACE }
SEMICN ;
INTTK int
IDENFR arr2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 2
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR pp
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
SEMICN ;
INTTK int
IDENFR fun11
ASSIGN =
INTCON 0
SEMICN ;
IDENFR fun11
ASSIGN =
IDENFR func1
LPARENT (
INTCON 1
COMMA ,
IDENFR arr1
COMMA ,
IDENFR arr2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR fun11
RPARENT )
SEMICN ;
FORTK for
LPARENT (
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
IDENFR i
PLUS +
PLUS +
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c_arr1
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
IDENFR func2
LPARENT (
RPARENT )
SEMICN ;
LBRACE {
IDENFR arr1_g
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 2
SEMICN ;
IDENFR arr1_g
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
IDENFR c_var1_g
SEMICN ;
IDENFR arr1_g
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
IDENFR arr1_g
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR arr2_g
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR arr2_g
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IDENFR arr2_g
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LPARENT (
IDENFR arr1_g
LBRACK [
INTCON 1
RBRACK ]
MULT *
INTCON 3
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "x equals %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
INTTK int
IDENFR ans
ASSIGN =
INTCON 0
SEMICN ;
IDENFR ans
ASSIGN =
IDENFR is_palindrome
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR ans
EQL ==
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%d is a palindrome\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
ELSETK else
PRINTFTK printf
LPARENT (
STRCON "%d is not a palindrome\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
